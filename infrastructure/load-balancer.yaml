Description: >
  Theorem LLC stack Load Balancer setup

Parameters:
  VpcId:
    Type: String
    Description: Specify the VPC Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnets in different Azs

  SGIngressCidr: 
    Type: String
    Default: "0.0.0.0/0"
    Description: Security Group Ingress Cidr Block

  SGIngressProtocol: 
    Type: String
    Default: "TCP"
    Description: Seurity Group Protocol allowed

  SGIngressFromPort:
    Type: Number
    Default: 80
    Description: Security Group Ingress Port

  SGIngressToPort:
    Type: Number
    Default: 80
    Description: Security Group Ingress Port

  LBListenerTGPort:
    Type: Number
    Default: 80
    Description: LoadBalancer Port

  LBHealthCheckProtocol:
    Type: String
    Default: HTTP
    Description: LoadBalancer HealthCheck Protocol

  Name: 
    Type: String
    Description: Loadbalancer Name used for Label Tags

  Environment:
    Type: String
    Description: Environment Name used for Label Tags

  AppOwner:
    Type: String
    Description: Application Owner Name used for Label Tags

Resources:
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${Name}-ALB
      SecurityGroupIngress:
        - CidrIp: !Ref SGIngressCidr
          IpProtocol: !Ref SGIngressProtocol
          FromPort: !Ref SGIngressFromPort
          ToPort: !Ref SGIngressToPort
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref AppOwner

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref AppOwner

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LBListenerTGPort
      Protocol: !Ref LBHealthCheckProtocol
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: !Ref VpcId
      Port: !Ref LBListenerTGPort
      Protocol: !Ref LBHealthCheckProtocol
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /health
      HealthCheckProtocol: !Ref LBHealthCheckProtocol
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 86400
        - Key: stickiness.type
          Value: lb_cookie
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref AppOwner

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward


Outputs:
  TargetGroup:
    Value: !Ref TargetGroup

  ServiceUrl:
    Description: URL of the load balancer for the sample service.
    Value: !Sub http://${LoadBalancer.DNSName}

  SecurityGroup:
    Value: !Ref SecurityGroup
